/*
 * Set up the initial data at all points on the numerical grid.
 */
void initial_data(const paramstruct *restrict params,REAL *restrict xx[3], REAL *restrict in_gfs) {
#include "./set_Cparameters.h"

    #pragma omp parallel for
    for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++) {
        const REAL xx2 = xx[2][i2];
        for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++) {
            const REAL xx1 = xx[1][i1];
            for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++) {
                const REAL xx0 = xx[0][i0];
                   {
                         const double tmp_0 = ((M)*(M));
                         const double tmp_1 = cos(xx1);
                         const double tmp_2 = ((chi)*(chi))*tmp_0;
                         const double tmp_4 = sqrt(tmp_0 - tmp_2);
                         const double tmp_6 = (1.0/(SINHW));
                         const double tmp_7 = tmp_6*xx0;
                         const double tmp_8 = exp(tmp_7);
                         const double tmp_9 = exp(-tmp_7);
                         const double tmp_10 = tmp_8 - tmp_9;
                         const double tmp_11 = (1.0/(tmp_10));
                         const double tmp_12 = exp(tmp_6) - exp(-tmp_6);
                         const double tmp_13 = tmp_12/AMPL;
                         const double tmp_14 = tmp_11*tmp_13;
                         const double tmp_15 = (1.0/4.0)*tmp_14*(M + tmp_4) + 1;
                         const double tmp_16 = ((tmp_15)*(tmp_15)*(tmp_15)*(tmp_15));
                         const double tmp_19 = ((tmp_12)*(tmp_12));
                         const double tmp_20 = ((AMPL)*(AMPL))/tmp_19;
                         const double tmp_21 = ((tmp_10)*(tmp_10))*tmp_20;
                         const double tmp_22 = tmp_16*tmp_21;
                         const double tmp_23 = ((tmp_1)*(tmp_1))*tmp_2 + tmp_22;
                         const double tmp_24 = (1.0/(tmp_23));
                         const double tmp_25 = ((tmp_15)*(tmp_15));
                         const double tmp_26 = AMPL/tmp_12;
                         const double tmp_27 = tmp_10*tmp_26;
                         const double tmp_29 = -M + tmp_25*tmp_27 + tmp_4;
                         const double tmp_30 = ((M)*(M)*(M)*(M));
                         const double tmp_31 = ((tmp_10)*(tmp_10)*(tmp_10)*(tmp_10));
                         const double tmp_33 = sin(xx1);
                         const double tmp_34 = ((tmp_33)*(tmp_33));
                         const double tmp_35 = tmp_2*tmp_34;
                         const double tmp_36 = tmp_2 + tmp_22;
                         const double tmp_38 = -2*M*tmp_25*tmp_27 + tmp_36;
                         const double tmp_39 = -tmp_35*tmp_38 + ((tmp_36)*(tmp_36));
                         const double tmp_40 = (1.0/(tmp_39));
                         const double tmp_41 = pow(tmp_10, 7);
                         const double tmp_42 = tmp_24*tmp_29*tmp_40*tmp_41;
                         const double tmp_43 = pow(AMPL, 7);
                         const double tmp_44 = pow(tmp_12, 7);
                         const double tmp_47 = (1.0/4.0)*M + tmp_27 + (1.0/4.0)*tmp_4;
                         const double tmp_48 = ((tmp_47)*(tmp_47));
                         const double tmp_49 = tmp_43/(tmp_44*tmp_48);
                         const double tmp_50 = tmp_42*tmp_49;
                         const double tmp_51 = cbrt(tmp_50);
                         const double tmp_54 = tmp_14/sqrt(tmp_23*tmp_39);
                         const double tmp_56 = tmp_24*tmp_34*tmp_51;
                         const double tmp_57 = (1.0/(tmp_29));
                         const double tmp_58 = tmp_48*tmp_57;
                         const double tmp_59 = tmp_44*tmp_58/(tmp_41*tmp_43);
                         const double tmp_60 = pow(tmp_23*tmp_39*tmp_59, -1.0/6.0);
                         const double tmp_61 = tmp_6*tmp_8;
                         const double tmp_62 = tmp_6*tmp_9;
                         const double tmp_63 = tmp_61 + tmp_62;
                         const double tmp_64 = ((tmp_63)*(tmp_63));
                         const double tmp_65 = (1.0/(tmp_64));
                         const double tmp_66 = (1.0/((tmp_10)*(tmp_10)*(tmp_10)));
                         const double tmp_67 = tmp_23*tmp_51;
                         const double tmp_68 = tmp_66*tmp_67;
                         const double tmp_69 = tmp_13*tmp_58*tmp_64;
                         const double tmp_70 = tmp_19/((AMPL)*(AMPL));
                         const double tmp_71 = (1.0/((tmp_10)*(tmp_10)));
                         const double tmp_73 = (1.0/(tmp_34));
                         const double tmp_74 = tmp_39*tmp_51;
                         const double tmp_75 = 2*tmp_6;
                         const double tmp_76 = exp(tmp_75);
                         const double tmp_77 = exp(2*tmp_7);
                         const double tmp_78 = tmp_19*tmp_65*(tmp_77 - 1)*(tmp_77 + 1)*exp(-tmp_75*(xx0 - 1))/((tmp_76 - 1)*(tmp_76 - 1));
                         const double tmp_80 = (M + tmp_4)*(-tmp_61 - tmp_62);
                         const double tmp_81 = ((tmp_15)*(tmp_15)*(tmp_15))*tmp_26*tmp_80;
                         const double tmp_82 = tmp_10*tmp_16*tmp_20*(2*tmp_61 + 2*tmp_62);
                         const double tmp_84 = tmp_51*(tmp_81 + tmp_82);
                         const double tmp_85 = pow(AMPL, 8);
                         const double tmp_86 = pow(tmp_12, 8);
                         const double tmp_88 = (1.0/3.0)*tmp_24*tmp_29;
                         const double tmp_90 = tmp_25*tmp_26*tmp_63;
                         const double tmp_91 = tmp_11*tmp_15*tmp_80;
                         const double tmp_94 = tmp_40*tmp_41*tmp_49;
                         const double tmp_95 = -tmp_81 - tmp_82;
                         const double tmp_96 = ((tmp_23)*(tmp_23));
                         const double tmp_97 = (1.0/(tmp_96));
                         const double tmp_98 = tmp_29*tmp_94*tmp_97;
                         const double tmp_99 = tmp_36*(2*tmp_81 + 2*tmp_82);
                         const double tmp_100 = tmp_35*(-2*M*tmp_90 - M*tmp_91 + tmp_81 + tmp_82);
                         const double tmp_101 = ((tmp_39)*(tmp_39));
                         const double tmp_102 = tmp_41*tmp_49/tmp_101;
                         const double tmp_103 = pow(tmp_10, 6)*tmp_40*tmp_49*tmp_88*(7*tmp_61 + 7*tmp_62) + tmp_102*tmp_88*(tmp_100 - tmp_99) + (1.0/3.0)*tmp_24*tmp_94*(tmp_90 + (1.0/2.0)*tmp_91) - 2.0/3.0*tmp_42*tmp_63*tmp_85/(((tmp_47)*(tmp_47)*(tmp_47))*tmp_86) + (1.0/3.0)*tmp_95*tmp_98;
                         const double tmp_105 = tmp_74*tmp_96;
                         const double tmp_106 = (1.0/(tmp_31));
                         const double tmp_107 = pow(tmp_50, 2.0/3.0);
                         const double tmp_109 = tmp_106*tmp_107*pow(tmp_12, 6)*tmp_39*tmp_65/pow(AMPL, 6);
                         const double tmp_110 = (1.0/2.0)*tmp_109;
                         const double tmp_111 = tmp_107*tmp_39*tmp_59;
                         const double tmp_113 = tmp_101*tmp_34*tmp_51;
                         const double tmp_114 = tmp_107*tmp_59*tmp_73*tmp_96;
                         const double tmp_115 = 2/((SINHW)*(SINHW));
                         const double tmp_118 = (1.0/((tmp_29)*(tmp_29)));
                         const double tmp_120 = ((tmp_47)*(tmp_47)*(tmp_47)*(tmp_47));
                         const double tmp_121 = tmp_105*tmp_118*tmp_120*tmp_64*tmp_86/(pow(tmp_10, 10)*tmp_85);
                         const double tmp_122 = 2*tmp_1*tmp_2;
                         const double tmp_123 = tmp_122*tmp_33*tmp_51;
                         const double tmp_126 = tmp_1*tmp_24*tmp_33;
                         const double tmp_127 = (2.0/3.0)*tmp_1*tmp_2*tmp_33*tmp_98 + (2.0/3.0)*tmp_102*tmp_126*tmp_2*tmp_29*tmp_38;
                         const double tmp_129 = (1.0/2.0)*tmp_101*pow(tmp_50, 4.0/3.0);
                         const double tmp_130 = tmp_122*((tmp_33)*(tmp_33)*(tmp_33));
                         in_gfs[IDX4S(ADD00GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD02GF,i0,i1,i2)] = chi*tmp_0*tmp_15*tmp_24*tmp_33*tmp_51*tmp_54*(3*((AMPL)*(AMPL)*(AMPL)*(AMPL))*pow(tmp_15, 8)*tmp_31/((tmp_12)*(tmp_12)*(tmp_12)*(tmp_12)) - ((chi)*(chi)*(chi)*(chi))*tmp_30 + 2*tmp_2*tmp_22 - tmp_35*(-tmp_2 + tmp_22))/sqrt(tmp_27*tmp_29);
                         in_gfs[IDX4S(ADD11GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD12GF,i0,i1,i2)] = -2*((chi)*(chi)*(chi))*tmp_1*tmp_25*tmp_30*tmp_54*tmp_56*sqrt(tmp_14*tmp_29)*(-1.0/4.0*M + tmp_27 - 1.0/4.0*tmp_4);
                         in_gfs[IDX4S(ADD22GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ALPHAGF,i0,i1,i2)] = tmp_60;
                         in_gfs[IDX4S(BETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(CFGF,i0,i1,i2)] = tmp_60;
                         in_gfs[IDX4S(HDD00GF,i0,i1,i2)] = tmp_65*tmp_70*(-tmp_20*tmp_64 + tmp_68*tmp_69);
                         in_gfs[IDX4S(HDD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD02GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD11GF,i0,i1,i2)] = tmp_70*tmp_71*(-tmp_21 + tmp_67);
                         in_gfs[IDX4S(HDD12GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD22GF,i0,i1,i2)] = tmp_70*tmp_71*tmp_73*(-tmp_21*tmp_34 + tmp_24*tmp_34*tmp_74);
                         in_gfs[IDX4S(LAMBDAU0GF,i0,i1,i2)] = tmp_26*tmp_63*(tmp_109*(tmp_110*(tmp_103*tmp_121 + tmp_106*tmp_67*tmp_69*(-3*tmp_61 - 3*tmp_62) + tmp_118*tmp_13*tmp_48*tmp_64*tmp_68*(-tmp_90 - 1.0/2.0*tmp_91) + tmp_13*tmp_58*tmp_63*tmp_68*(tmp_115*tmp_8 - tmp_115*tmp_9) + 2*tmp_47*tmp_57*((tmp_63)*(tmp_63)*(tmp_63))*tmp_68 + tmp_66*tmp_69*tmp_84) - tmp_78/((SINHW)*(SINHW)*(SINHW))) + tmp_111*(tmp_110*(-tmp_103*tmp_105*tmp_59 - tmp_84) + tmp_6*tmp_78) + tmp_114*(tmp_110*(-tmp_103*tmp_113*tmp_59 - tmp_34*tmp_74*tmp_95*tmp_97 - tmp_56*(-tmp_100 + tmp_99)) + tmp_34*tmp_6*tmp_78));
                         in_gfs[IDX4S(LAMBDAU1GF,i0,i1,i2)] = tmp_27*(tmp_114*((1.0/2.0)*tmp_111*(-tmp_113*tmp_127*tmp_59 - 2*tmp_126*tmp_74 + tmp_130*tmp_24*tmp_38*tmp_51 - tmp_130*tmp_74*tmp_97) + (1.0/2.0)*tmp_19*tmp_71*((1 - tmp_77)*(1 - tmp_77))*exp(tmp_75*(1 - xx0))*sin(2*xx1)/((1 - tmp_76)*(1 - tmp_76))) + pow(tmp_12, 13)*tmp_129*tmp_58*tmp_65*(-tmp_121*tmp_127 + tmp_123*tmp_66*tmp_69)/(pow(AMPL, 13)*pow(tmp_10, 11)) + tmp_118*pow(tmp_12, 14)*tmp_120*tmp_129*(tmp_105*tmp_127*tmp_59 - tmp_123)/(pow(AMPL, 14)*pow(tmp_10, 14)));
                         in_gfs[IDX4S(LAMBDAU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(TRKGF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU2GF,i0,i1,i2)] = 0;
                   }
                
            } // END LOOP: for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++)
        } // END LOOP: for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++)
    } // END LOOP: for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++)
}
