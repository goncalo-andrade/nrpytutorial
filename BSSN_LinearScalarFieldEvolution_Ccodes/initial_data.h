/*
 * Set up the initial data at all points on the numerical grid.
 */
void initial_data(const paramstruct *restrict params,REAL *restrict xx[3], REAL *restrict in_gfs) {
#include "./set_Cparameters.h"

    #pragma omp parallel for
    for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++) {
        const REAL xx2 = xx[2][i2];
        for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++) {
            const REAL xx1 = xx[1][i1];
            for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++) {
                const REAL xx0 = xx[0][i0];
                   {
                         const double tmp_0 = ((M)*(M));
                         const double tmp_2 = ((chi)*(chi))*tmp_0;
                         const double tmp_4 = sqrt(tmp_0 - tmp_2);
                         const double tmp_6 = (1.0/4.0)*M + (1.0/4.0)*tmp_4 + xx0;
                         const double tmp_7 = ((tmp_6)*(tmp_6));
                         const double tmp_8 = (1.0/(tmp_7));
                         const double tmp_9 = (1.0/(xx0));
                         const double tmp_11 = tmp_9*(M + tmp_4);
                         const double tmp_12 = (1.0/4.0)*tmp_11 + 1;
                         const double tmp_13 = ((tmp_12)*(tmp_12));
                         const double tmp_15 = -M + tmp_13*xx0 + tmp_4;
                         const double tmp_16 = cos(xx1);
                         const double tmp_18 = ((xx0)*(xx0));
                         const double tmp_19 = ((tmp_12)*(tmp_12)*(tmp_12)*(tmp_12));
                         const double tmp_20 = tmp_18*tmp_19;
                         const double tmp_21 = ((tmp_16)*(tmp_16))*tmp_2 + tmp_20;
                         const double tmp_22 = (1.0/(tmp_21));
                         const double tmp_23 = pow(xx0, 7);
                         const double tmp_24 = tmp_2 + tmp_20;
                         const double tmp_26 = -2*M*tmp_13*xx0 + tmp_24;
                         const double tmp_27 = sin(xx1);
                         const double tmp_28 = ((tmp_27)*(tmp_27));
                         const double tmp_29 = tmp_2*tmp_28;
                         const double tmp_30 = ((tmp_24)*(tmp_24)) - tmp_26*tmp_29;
                         const double tmp_31 = (1.0/(tmp_30));
                         const double tmp_32 = tmp_15*tmp_22*tmp_23*tmp_31;
                         const double tmp_33 = tmp_32*tmp_8;
                         const double tmp_34 = cbrt(tmp_33);
                         const double tmp_35 = ((M)*(M)*(M)*(M));
                         const double tmp_36 = ((xx0)*(xx0)*(xx0)*(xx0));
                         const double tmp_37 = 2*tmp_2;
                         const double tmp_39 = tmp_9/sqrt(tmp_21*tmp_30);
                         const double tmp_41 = tmp_22*tmp_28*tmp_34;
                         const double tmp_42 = 0.28526683994916474*tmp_9 + 1;
                         const double tmp_43 = tmp_18*((tmp_42)*(tmp_42)*(tmp_42)*(tmp_42));
                         const double tmp_44 = ((tmp_42)*(tmp_42));
                         const double tmp_45 = 2*xx0;
                         const double tmp_46 = tmp_43 + 0.98009999999999997;
                         const double tmp_47 = (1.0/(-tmp_28*(0.98009999999999997*tmp_43 - 1.9601999999999999*tmp_44*xx0 + 0.96059600999999994) + ((tmp_46)*(tmp_46))));
                         const double tmp_48 = (1.0/(tmp_15));
                         const double tmp_49 = tmp_48*tmp_7;
                         const double tmp_50 = tmp_49/tmp_23;
                         const double tmp_51 = tmp_21*tmp_34;
                         const double tmp_52 = (1.0/((xx0)*(xx0)*(xx0)));
                         const double tmp_53 = tmp_49*tmp_52;
                         const double tmp_54 = (1.0/(tmp_18));
                         const double tmp_55 = (1.0/(tmp_28));
                         const double tmp_56 = tmp_30*tmp_34;
                         const double tmp_58 = ((tmp_12)*(tmp_12)*(tmp_12))*(M + tmp_4);
                         const double tmp_59 = tmp_19*tmp_45 - tmp_58;
                         const double tmp_61 = tmp_22*tmp_31*tmp_8;
                         const double tmp_63 = (1.0/2.0)*tmp_11*tmp_12;
                         const double tmp_65 = ((tmp_21)*(tmp_21));
                         const double tmp_66 = (1.0/(tmp_65));
                         const double tmp_67 = tmp_66*(-tmp_19*tmp_45 + tmp_58);
                         const double tmp_69 = (1.0/3.0)*tmp_15*tmp_23*tmp_8;
                         const double tmp_70 = ((tmp_30)*(tmp_30));
                         const double tmp_71 = (1.0/(tmp_70));
                         const double tmp_72 = tmp_24*(4*tmp_19*xx0 - 2*tmp_58);
                         const double tmp_73 = tmp_29*(M*tmp_11*tmp_12 - 2*M*tmp_13 + tmp_59);
                         const double tmp_74 = (7.0/3.0)*tmp_15*tmp_61*pow(xx0, 6) + tmp_22*tmp_69*tmp_71*(-tmp_72 + tmp_73) + (1.0/3.0)*tmp_23*tmp_61*(tmp_13 - tmp_63) + tmp_31*tmp_67*tmp_69 - 2.0/3.0*tmp_32/((tmp_6)*(tmp_6)*(tmp_6));
                         const double tmp_76 = tmp_56*tmp_65*tmp_74;
                         const double tmp_77 = (1.0/(tmp_36));
                         const double tmp_78 = pow(tmp_33, 2.0/3.0);
                         const double tmp_80 = (1.0/2.0)*tmp_30*tmp_78;
                         const double tmp_82 = tmp_28*tmp_34*tmp_50*tmp_70;
                         const double tmp_83 = tmp_50*tmp_55*tmp_65*tmp_78;
                         const double tmp_85 = (1.0/((tmp_15)*(tmp_15)));
                         const double tmp_86 = ((tmp_6)*(tmp_6)*(tmp_6)*(tmp_6))*tmp_85;
                         const double tmp_87 = tmp_86/pow(xx0, 10);
                         const double tmp_88 = (1.0/2.0)*pow(tmp_33, 4.0/3.0)*tmp_70;
                         const double tmp_89 = tmp_16*tmp_27;
                         const double tmp_91 = tmp_34*tmp_37*tmp_89;
                         const double tmp_92 = (2.0/3.0)*tmp_15*tmp_2*tmp_23*tmp_8;
                         const double tmp_94 = tmp_22*tmp_26*tmp_71*tmp_89*tmp_92 + tmp_31*tmp_66*tmp_89*tmp_92;
                         const double tmp_95 = tmp_56*tmp_65*tmp_94;
                         const double tmp_96 = tmp_16*((tmp_27)*(tmp_27)*(tmp_27));
                         in_gfs[IDX4S(ADD00GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD02GF,i0,i1,i2)] = chi*tmp_0*tmp_12*tmp_22*tmp_27*tmp_34*tmp_39*(-((chi)*(chi)*(chi)*(chi))*tmp_35 + 3*pow(tmp_12, 8)*tmp_36 + tmp_20*tmp_37 - tmp_29*(-tmp_2 + tmp_20))/sqrt(tmp_15*xx0);
                         in_gfs[IDX4S(ADD11GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD12GF,i0,i1,i2)] = -2*((chi)*(chi)*(chi))*tmp_13*tmp_16*tmp_35*tmp_39*tmp_41*sqrt(tmp_15*tmp_9)*(-1.0/4.0*M - 1.0/4.0*tmp_4 + xx0);
                         in_gfs[IDX4S(ADD22GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ALPHAGF,i0,i1,i2)] = sqrt(tmp_47*(0.98009999999999997*((tmp_16)*(tmp_16)) + tmp_43)*(-tmp_44*tmp_45 + tmp_46));
                         in_gfs[IDX4S(BETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(CFGF,i0,i1,i2)] = pow(tmp_21*tmp_30*tmp_50, -1.0/6.0);
                         in_gfs[IDX4S(HDD00GF,i0,i1,i2)] = tmp_51*tmp_53 - 1;
                         in_gfs[IDX4S(HDD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD02GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD11GF,i0,i1,i2)] = tmp_54*(-tmp_18 + tmp_51);
                         in_gfs[IDX4S(HDD12GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD22GF,i0,i1,i2)] = tmp_54*tmp_55*(-tmp_18*tmp_28 + tmp_22*tmp_28*tmp_56);
                         in_gfs[IDX4S(LAMBDAU0GF,i0,i1,i2)] = tmp_30*tmp_50*tmp_78*(tmp_77*tmp_80*(-tmp_34*tmp_59 - tmp_50*tmp_76) + xx0) + tmp_83*(tmp_28*xx0 + tmp_77*tmp_80*(-tmp_28*tmp_56*tmp_67 - tmp_41*(tmp_72 - tmp_73) - tmp_74*tmp_82)) + tmp_88*(tmp_34*tmp_53*tmp_59 + tmp_48*tmp_51*tmp_52*((1.0/2.0)*M + (1.0/2.0)*tmp_4 + tmp_45) - 3*tmp_49*tmp_51*tmp_77 + tmp_51*tmp_52*tmp_7*tmp_85*(-tmp_13 + tmp_63) + tmp_76*tmp_87)/pow(xx0, 8);
                         in_gfs[IDX4S(LAMBDAU1GF,i0,i1,i2)] = xx0*(tmp_49*tmp_88*(tmp_53*tmp_91 - tmp_87*tmp_95)/pow(xx0, 11) + tmp_83*(tmp_50*tmp_80*(tmp_22*tmp_26*tmp_34*tmp_37*tmp_96 - 2*tmp_22*tmp_56*tmp_89 - tmp_37*tmp_56*tmp_66*tmp_96 - tmp_82*tmp_94) + (1.0/2.0)*sin(2*xx1)) + tmp_86*tmp_88*(tmp_50*tmp_95 - tmp_91)/pow(xx0, 14));
                         in_gfs[IDX4S(LAMBDAU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(TRKGF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU2GF,i0,i1,i2)] = -1.98*tmp_18*tmp_27*tmp_44*tmp_47;
                   }
                
            } // END LOOP: for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++)
        } // END LOOP: for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++)
    } // END LOOP: for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++)
}
