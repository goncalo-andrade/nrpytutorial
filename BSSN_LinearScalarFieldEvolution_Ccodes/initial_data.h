/*
 * Set up the initial data at all points on the numerical grid.
 */
void initial_data(const paramstruct *restrict params,REAL *restrict xx[3], REAL *restrict in_gfs) {
#include "./set_Cparameters.h"

    #pragma omp parallel for
    for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++) {
        const REAL xx2 = xx[2][i2];
        for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++) {
            const REAL xx1 = xx[1][i1];
            for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++) {
                const REAL xx0 = xx[0][i0];
                   {
                         const double tmp_0 = ((M)*(M));
                         const double tmp_1 = cos(xx1);
                         const double tmp_3 = ((chi)*(chi))*tmp_0;
                         const double tmp_5 = sqrt(tmp_0 - tmp_3);
                         const double tmp_7 = (1.0/(SINHW));
                         const double tmp_8 = tmp_7*xx0;
                         const double tmp_9 = exp(tmp_8);
                         const double tmp_10 = exp(-tmp_8);
                         const double tmp_11 = -tmp_10 + tmp_9;
                         const double tmp_12 = (1.0/(tmp_11));
                         const double tmp_13 = exp(tmp_7) - exp(-tmp_7);
                         const double tmp_14 = tmp_13/AMPL;
                         const double tmp_15 = tmp_12*tmp_14;
                         const double tmp_17 = (1.0/4.0)*tmp_15*(M + tmp_5) + 1;
                         const double tmp_18 = ((tmp_17)*(tmp_17)*(tmp_17)*(tmp_17));
                         const double tmp_21 = ((tmp_13)*(tmp_13));
                         const double tmp_22 = ((AMPL)*(AMPL))/tmp_21;
                         const double tmp_23 = ((tmp_11)*(tmp_11))*tmp_22;
                         const double tmp_24 = tmp_18*tmp_23;
                         const double tmp_25 = ((tmp_1)*(tmp_1))*tmp_3 + tmp_24;
                         const double tmp_26 = (1.0/(tmp_25));
                         const double tmp_27 = ((tmp_17)*(tmp_17));
                         const double tmp_28 = AMPL/tmp_13;
                         const double tmp_29 = tmp_11*tmp_28;
                         const double tmp_31 = -M + tmp_27*tmp_29 + tmp_5;
                         const double tmp_32 = ((M)*(M)*(M)*(M));
                         const double tmp_33 = ((tmp_11)*(tmp_11)*(tmp_11)*(tmp_11));
                         const double tmp_34 = ((AMPL)*(AMPL)*(AMPL)*(AMPL))*tmp_33/((tmp_13)*(tmp_13)*(tmp_13)*(tmp_13));
                         const double tmp_36 = sin(xx1);
                         const double tmp_37 = ((tmp_36)*(tmp_36));
                         const double tmp_38 = tmp_3*tmp_37;
                         const double tmp_39 = tmp_24 + tmp_3;
                         const double tmp_41 = -2*M*tmp_27*tmp_29 + tmp_39;
                         const double tmp_42 = -tmp_38*tmp_41 + ((tmp_39)*(tmp_39));
                         const double tmp_43 = (1.0/(tmp_42));
                         const double tmp_44 = pow(tmp_11, 7);
                         const double tmp_45 = tmp_26*tmp_31*tmp_43*tmp_44;
                         const double tmp_46 = pow(AMPL, 7);
                         const double tmp_47 = pow(tmp_13, 7);
                         const double tmp_50 = (1.0/4.0)*M + tmp_29 + (1.0/4.0)*tmp_5;
                         const double tmp_51 = ((tmp_50)*(tmp_50));
                         const double tmp_52 = tmp_46/(tmp_47*tmp_51);
                         const double tmp_53 = tmp_45*tmp_52;
                         const double tmp_54 = cbrt(tmp_53);
                         const double tmp_57 = tmp_15/sqrt(tmp_25*tmp_42);
                         const double tmp_59 = tmp_26*tmp_37*tmp_54;
                         const double tmp_60 = (1.0/(tmp_31));
                         const double tmp_61 = tmp_51*tmp_60;
                         const double tmp_62 = tmp_47*tmp_61/(tmp_44*tmp_46);
                         const double tmp_63 = tmp_25*tmp_42*tmp_62;
                         const double tmp_64 = pow(tmp_63, -1.0/6.0);
                         const double tmp_66 = ((w)*(w));
                         const double tmp_67 = ((r0)*(r0));
                         const double tmp_69 = (1.0/(tmp_66));
                         const double tmp_70 = -r0 + tmp_29;
                         const double tmp_71 = exp(-2*tmp_69*((tmp_70)*(tmp_70)));
                         const double tmp_72 = (1.0/sqrt(M_PI));
                         const double tmp_74 = M_SQRT2;
                         const double tmp_75 = tmp_74/w;
                         const double tmp_76 = erf(tmp_70*tmp_75) - 1;
                         const double tmp_79 = ((r0)*(r0)*(r0)*(r0));
                         const double tmp_80 = ((w)*(w)*(w)*(w));
                         const double tmp_83 = (1.0/((tmp_11)*(tmp_11)));
                         const double tmp_84 = tmp_21/((AMPL)*(AMPL));
                         const double tmp_85 = tmp_83*tmp_84;
                         const double tmp_86 = ((A)*(A))*tmp_85;
                         const double tmp_87 = (1.0/1600.0)*sqrt(15)*tmp_86*w;
                         const double tmp_89 = 4*tmp_79 + 2*tmp_80;
                         const double tmp_90 = sqrt(30)*tmp_72;
                         const double tmp_91 = (1.0/800.0)*tmp_66*tmp_86*tmp_90;
                         const double tmp_92 = ((r0)*(r0)*(r0));
                         const double tmp_94 = ((tmp_11)*(tmp_11)*(tmp_11));
                         const double tmp_95 = r0*tmp_87*(erf(r0*tmp_75) + 1)*(40*tmp_66*tmp_67 + 16*tmp_79 + 15*tmp_80) - tmp_71*tmp_91*(4*((AMPL)*(AMPL)*(AMPL))*r0*tmp_94/((tmp_13)*(tmp_13)*(tmp_13)) + 4*tmp_23*tmp_67 + 4*tmp_29*tmp_92 + 4*tmp_34 + tmp_66*(7*r0*tmp_29 + 4*tmp_23 + 9*tmp_67) + tmp_89) + tmp_76*tmp_87*(-16*((AMPL)*(AMPL)*(AMPL)*(AMPL)*(AMPL))*((tmp_11)*(tmp_11)*(tmp_11)*(tmp_11)*(tmp_11))/((tmp_13)*(tmp_13)*(tmp_13)*(tmp_13)*(tmp_13)) + 16*((r0)*(r0)*(r0)*(r0)*(r0)) + 15*r0*tmp_80 + 40*tmp_66*tmp_92) + tmp_91*(9*tmp_66*tmp_67 + tmp_89)*exp(-2*tmp_67*tmp_69);
                         const double tmp_96 = sqrt(5)*tmp_72;
                         const double tmp_97 = tmp_7*tmp_9;
                         const double tmp_98 = tmp_10*tmp_7;
                         const double tmp_99 = tmp_97 + tmp_98;
                         const double tmp_100 = ((tmp_99)*(tmp_99));
                         const double tmp_101 = (1.0/(tmp_100));
                         const double tmp_102 = (1.0/(tmp_94));
                         const double tmp_103 = tmp_25*tmp_54;
                         const double tmp_104 = tmp_102*tmp_103;
                         const double tmp_105 = tmp_100*tmp_14*tmp_61;
                         const double tmp_106 = (1.0/(tmp_37));
                         const double tmp_107 = tmp_42*tmp_54;
                         const double tmp_108 = 2*tmp_7;
                         const double tmp_109 = exp(tmp_108);
                         const double tmp_110 = exp(2*tmp_8);
                         const double tmp_111 = tmp_101*tmp_21*(tmp_110 - 1)*(tmp_110 + 1)*exp(-tmp_108*(xx0 - 1))/((tmp_109 - 1)*(tmp_109 - 1));
                         const double tmp_113 = (M + tmp_5)*(-tmp_97 - tmp_98);
                         const double tmp_114 = tmp_113*((tmp_17)*(tmp_17)*(tmp_17))*tmp_28;
                         const double tmp_115 = tmp_11*tmp_18*tmp_22*(2*tmp_97 + 2*tmp_98);
                         const double tmp_117 = tmp_54*(tmp_114 + tmp_115);
                         const double tmp_118 = pow(AMPL, 8);
                         const double tmp_119 = pow(tmp_13, 8);
                         const double tmp_121 = (1.0/3.0)*tmp_26*tmp_31;
                         const double tmp_123 = tmp_27*tmp_28*tmp_99;
                         const double tmp_124 = tmp_113*tmp_12*tmp_17;
                         const double tmp_127 = tmp_43*tmp_44*tmp_52;
                         const double tmp_128 = -tmp_114 - tmp_115;
                         const double tmp_129 = ((tmp_25)*(tmp_25));
                         const double tmp_130 = (1.0/(tmp_129));
                         const double tmp_131 = tmp_127*tmp_130*tmp_31;
                         const double tmp_132 = tmp_39*(2*tmp_114 + 2*tmp_115);
                         const double tmp_133 = tmp_38*(-2*M*tmp_123 - M*tmp_124 + tmp_114 + tmp_115);
                         const double tmp_134 = ((tmp_42)*(tmp_42));
                         const double tmp_135 = tmp_44*tmp_52/tmp_134;
                         const double tmp_136 = pow(tmp_11, 6)*tmp_121*tmp_43*tmp_52*(7*tmp_97 + 7*tmp_98) - 2.0/3.0*tmp_118*tmp_45*tmp_99/(tmp_119*((tmp_50)*(tmp_50)*(tmp_50))) + tmp_121*tmp_135*(-tmp_132 + tmp_133) + (1.0/3.0)*tmp_127*tmp_26*(tmp_123 + (1.0/2.0)*tmp_124) + (1.0/3.0)*tmp_128*tmp_131;
                         const double tmp_138 = tmp_107*tmp_129;
                         const double tmp_139 = (1.0/(tmp_33));
                         const double tmp_140 = pow(tmp_53, 2.0/3.0);
                         const double tmp_142 = tmp_101*pow(tmp_13, 6)*tmp_139*tmp_140*tmp_42/pow(AMPL, 6);
                         const double tmp_143 = (1.0/2.0)*tmp_142;
                         const double tmp_144 = tmp_140*tmp_42*tmp_62;
                         const double tmp_146 = tmp_134*tmp_37*tmp_54;
                         const double tmp_147 = tmp_106*tmp_129*tmp_140*tmp_62;
                         const double tmp_148 = 2/((SINHW)*(SINHW));
                         const double tmp_151 = (1.0/((tmp_31)*(tmp_31)));
                         const double tmp_153 = ((tmp_50)*(tmp_50)*(tmp_50)*(tmp_50));
                         const double tmp_154 = tmp_100*tmp_119*tmp_138*tmp_151*tmp_153/(pow(tmp_11, 10)*tmp_118);
                         const double tmp_155 = 2*tmp_1*tmp_3;
                         const double tmp_156 = tmp_155*tmp_36*tmp_54;
                         const double tmp_159 = tmp_1*tmp_26*tmp_36;
                         const double tmp_160 = (2.0/3.0)*tmp_1*tmp_131*tmp_3*tmp_36 + (2.0/3.0)*tmp_135*tmp_159*tmp_3*tmp_31*tmp_41;
                         const double tmp_162 = (1.0/2.0)*tmp_134*pow(tmp_53, 4.0/3.0);
                         const double tmp_163 = tmp_155*((tmp_36)*(tmp_36)*(tmp_36));
                         in_gfs[IDX4S(ADD00GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD02GF,i0,i1,i2)] = chi*tmp_0*tmp_17*tmp_26*tmp_36*tmp_54*tmp_57*(-((chi)*(chi)*(chi)*(chi))*tmp_32 + 3*pow(tmp_17, 8)*tmp_34 + 2*tmp_24*tmp_3 - tmp_38*(tmp_24 - tmp_3))/sqrt(tmp_29*tmp_31);
                         in_gfs[IDX4S(ADD11GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ADD12GF,i0,i1,i2)] = -2*((chi)*(chi)*(chi))*tmp_1*tmp_27*tmp_32*tmp_57*tmp_59*sqrt(tmp_15*tmp_31)*(-1.0/4.0*M + tmp_29 - 1.0/4.0*tmp_5);
                         in_gfs[IDX4S(ADD22GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(ALPHAGF,i0,i1,i2)] = tmp_64;
                         in_gfs[IDX4S(BETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(BETU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(CFGF,i0,i1,i2)] = tmp_64/((1 + ((1.0/32.0)*((A)*(A))*tmp_15*tmp_72*w*(-2*tmp_71*tmp_72*w*(tmp_66 + 2*tmp_67) - tmp_74*tmp_76*(tmp_66*(-3*r0 + tmp_29) + tmp_67*(-4*r0 + 4*tmp_29))) + (1.0/4.0)*tmp_15*tmp_37*tmp_90*tmp_95*cos(2*xx2) - 1.0/3.0*sqrt(6)*tmp_15*tmp_95*((3.0/4.0)*((tmp_1)*(tmp_1))*tmp_96 - 1.0/4.0*tmp_96))/pow(tmp_63, 1.0/12.0))*(1 + ((1.0/32.0)*((A)*(A))*tmp_15*tmp_72*w*(-2*tmp_71*tmp_72*w*(tmp_66 + 2*tmp_67) - tmp_74*tmp_76*(tmp_66*(-3*r0 + tmp_29) + tmp_67*(-4*r0 + 4*tmp_29))) + (1.0/4.0)*tmp_15*tmp_37*tmp_90*tmp_95*cos(2*xx2) - 1.0/3.0*sqrt(6)*tmp_15*tmp_95*((3.0/4.0)*((tmp_1)*(tmp_1))*tmp_96 - 1.0/4.0*tmp_96))/pow(tmp_63, 1.0/12.0)));
                         in_gfs[IDX4S(HDD00GF,i0,i1,i2)] = tmp_101*tmp_84*(-tmp_100*tmp_22 + tmp_104*tmp_105);
                         in_gfs[IDX4S(HDD01GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD02GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD11GF,i0,i1,i2)] = tmp_85*(tmp_103 - tmp_23);
                         in_gfs[IDX4S(HDD12GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(HDD22GF,i0,i1,i2)] = tmp_106*tmp_85*(tmp_107*tmp_26*tmp_37 - tmp_23*tmp_37);
                         in_gfs[IDX4S(LAMBDAU0GF,i0,i1,i2)] = tmp_28*tmp_99*(tmp_142*(tmp_143*(tmp_100*tmp_104*tmp_14*tmp_151*tmp_51*(-tmp_123 - 1.0/2.0*tmp_124) + tmp_102*tmp_105*tmp_117 + tmp_103*tmp_105*tmp_139*(-3*tmp_97 - 3*tmp_98) + tmp_104*tmp_14*tmp_61*tmp_99*(-tmp_10*tmp_148 + tmp_148*tmp_9) + 2*tmp_104*tmp_50*tmp_60*((tmp_99)*(tmp_99)*(tmp_99)) + tmp_136*tmp_154) - tmp_111/((SINHW)*(SINHW)*(SINHW))) + tmp_144*(tmp_111*tmp_7 + tmp_143*(-tmp_117 - tmp_136*tmp_138*tmp_62)) + tmp_147*(tmp_111*tmp_37*tmp_7 + tmp_143*(-tmp_107*tmp_128*tmp_130*tmp_37 - tmp_136*tmp_146*tmp_62 - tmp_59*(tmp_132 - tmp_133))));
                         in_gfs[IDX4S(LAMBDAU1GF,i0,i1,i2)] = tmp_29*(tmp_147*((1.0/2.0)*tmp_144*(-tmp_107*tmp_130*tmp_163 - 2*tmp_107*tmp_159 - tmp_146*tmp_160*tmp_62 + tmp_163*tmp_26*tmp_41*tmp_54) + (1.0/2.0)*tmp_21*tmp_83*((1 - tmp_110)*(1 - tmp_110))*exp(tmp_108*(1 - xx0))*sin(2*xx1)/((1 - tmp_109)*(1 - tmp_109))) + tmp_101*pow(tmp_13, 13)*tmp_162*tmp_61*(tmp_102*tmp_105*tmp_156 - tmp_154*tmp_160)/(pow(AMPL, 13)*pow(tmp_11, 11)) + pow(tmp_13, 14)*tmp_151*tmp_153*tmp_162*(tmp_138*tmp_160*tmp_62 - tmp_156)/(pow(AMPL, 14)*pow(tmp_11, 14)));
                         in_gfs[IDX4S(LAMBDAU2GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(TRKGF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU0GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU1GF,i0,i1,i2)] = 0;
                         in_gfs[IDX4S(VETU2GF,i0,i1,i2)] = 0;
                   }
                
            } // END LOOP: for (int i0 = 0; i0 < Nxx_plus_2NGHOSTS0; i0++)
        } // END LOOP: for (int i1 = 0; i1 < Nxx_plus_2NGHOSTS1; i1++)
    } // END LOOP: for (int i2 = 0; i2 < Nxx_plus_2NGHOSTS2; i2++)
}
